---
title: Febraury 2023
author: David Marchan
data: not remember
date-modified: last-modified
date-format: full
description: My febraury clases but not finished
categories: [markup, qmd, quarto]
toc: true
number-sections: true
format:
  html

---

![](../img/February.jpeg){fig-align="center" width=100%}

## **Class 1/02/2023: LibraryProject: define priorities and code test**

![](../img/calse-01-02.png){fig-align="center" width=150%}


üìò Linux Lab#SE03-2: Library/Book Sprint Zero

Before define what a Sprint Zero really is, let‚Äôs see what it isn‚Äôt.

- A Sprint Zero is not the phase in which the team is put together. In order to conduct a Sprint in the first place, a team must already be in place.
- A Sprint Zero is not the phase for setting up infrastructure which should already be implemented or easily implemented on demand, but not as part of a Sprint Zero.
- A Sprint Zero should not involve adding products to a backlog or Consider Planning.

The main goal of a Sprint Zero is to deliver some usable value that can be built upon by the next team. Sprint Zeros are required to:

- Create the project‚Äôs **skeleton**, including research spikes.
- **Keep design minimal**.ep design minimal
- Develop a small number of **stories** to completion.
- Be low velocity and lightweight.

More specifically, the deliverables of a Sprint Zero should be as follows:

- A **usable** piece of code, however small.
- A *+minimal** environment for writing code.
- A **prioritization** of features or a list of stories.
- A **release plan** assigning each story to a Sprint.
- A plan for the most likely implementation of **features**.


### Sprint Zero: mock-up

    Options:

    1- Make a Borrow

    2- User Management

    3- Book Management

    4- Quit

    Option?

    'Borrow'

    User?

    '159742OPI'

    Book?

    'Anna Karenina'

    Proceed, are your sure?

    'Yes'
    
    Borrow made, borrowId: RER7567, dueDate: 15/02/2023 

    Options:

    1- Make a Borrow

    2- User Management

    3- Book Management

    4- Quit

    Option?

    'Quit'

### **Random ID's**

Calss UUID creates id with 128 bit value

    Public static String = createID(){
        UUID uuid = UUID.randomUUID();
        String id = uuid.toString();
        return id;
    }

::: {.callout-comment}
We need an random ID for all the objects that requires it. 
:::

## **Class 2/02/2023: Quarto: using API Rest with D3.js**

Implementar dentro de quarto el ejercicio o entrada observable (Quarto Markdown: code & data)

Rest tipo de arquitectura para hacer webs

**REST (Representational State Transfer)**

- Rest is an architectural style for building web services.

- It is based on a client-server model, where a client sends a request to a server and the server sends a response.

- RESTful APIs use HTTP requests to POST (create), PUT (update), GET (read), and DELETE (delete) data.

- A RESTful API is a simple, consistent, and easy-to-use way for applications to communicate with each other over the internet.

Ventajas apirest bien para volumen y complejidad pero no para tiempo real, usariamos en el ultimo caso websocket


## **Class 03/02/2023: SCRUM, Vocabulary, Four-Hats & Devops CIFO**


- SCRUM: delete (step 2 spaceX)
- Vocabulary
- Four-Hats: Project/DDD/UML/code
- Cifo Java AppWeb Service Infrastructure: servers, services, network, URL	

## **Class 08/02/2023: JavaSE Laboratory**

El viernes haremos introducci√≥n a spring a√±adiendo unas 5 dependencias mas ademas de Faker, Lombook y Junit

Hoy continuamos con el laboratorio del d√≠a 01/02/2023

Transformar en tabla:

(1st Column)Spring Backlog:

<p style="text-align:left" class = "table_Colored_Red"> CODE </p>
<p style="text-align:left" class = "table_Colored_Blue"> UMl</p>
<p style="text-align:left" class = "table_Colored_Green"> PROJECT</p>
<p style="text-align:left" class = "table_Colored_Magenta"> DOMAIN</p>


- (Code) TestBorrow x
- (UML) UML Manager
- (UML) UMLCore
- (Project) Use Case
- (Project) MockUp
- (Project) Documentation
- (Domains) Common Language
- (Code) BookManager x
- (Code) BorrowManager x
- (Code) UserManager x
- (Code) AuthorManager x
- (Code) Fakers x
- (Code) Refactor UserInterface x
- (Domain) Define userId (UUID)
- (Project) Bussiness Model
- (Project) Git Tech
- (Project) Git Documentation
- (Project) Git Roles
- (Code) Git INIT x
- (Project & UML) Functional Diagramm
- (Poject) Storage
- (Project) Sprint Goal
- (Project) The concept of done
- (Project) Release Plan
- (Code) Sandbox x

(2st To-do)Spring Backlog:

(3st Doing)Spring Backlog:

(4st Done)Spring Backlog:



<table>
  <thead>
    <tr>
      <th style="text-align:center" >Spring Backlog</th>
      <th style="text-align:center">To-do</th>
      <th style="text-align:center">Doing</th>
      <th style="text-align:center">Done</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="table_Colored_Red">TestBorrow</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">BookManager</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">BorrowManager</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">UserManager</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">AuthorManager</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">Fakers</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">Refactor UserInterface</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">Git INIT</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">Sandbox</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
  </tbody>
</table>


## **Class 09/02/2023: JavaSE Laboratory**

## **Class 10/02/2023: **

Wraper Optional ejemplo y explicaci√≥n

java.util.Optional es una clase que se introdujo en Java 8 y se utiliza para representar valores opcionales. Anteriormente, para representar valores que pueden o no estar presentes, se utilizaba null, lo que a menudo resultaba en errores de NullPointerException. Con Optional, puedes representar valores opcionales de una manera m√°s segura y f√°cil de manejar.

Optional es un contenedor que puede o no tener un valor dentro. Si un Optional contiene un valor, se dice que est√° "presente", de lo contrario, se dice que est√° "vac√≠o". Puedes usar m√©todos como of() o ofNullable() para crear un Optional con un valor dentro, y empty() para crear un Optional vac√≠o.

Una de las principales ventajas de usar Optional es que te permite manejar el caso en el que un valor puede no estar presente de manera m√°s clara y legible. Por ejemplo, puedes usar el m√©todo orElse() para proporcionar un valor por defecto si el Optional est√° vac√≠o, o el m√©todo orElseGet() para proporcionar un valor por defecto a trav√©s de un proveedor.

En resumen, java.util.Optional es una clase que puede ayudarte a escribir c√≥digo m√°s seguro y legible al trabajar con valores opcionales en Java.



<pre class="code-block">
<code class="java">

  import java.util.Optional;

  public class OptionalExample {
      public static void main(String[] args) {
          // Crear un Optional vac√≠o
          Optional<String> empty = Optional.empty();
          System.out.println("Empty Optional: " + empty);
          
          // Crear un Optional con un valor
          Optional<String> value = Optional.of("Value");
          System.out.println("Optional with value: " + value);
          
          // Crear un Optional a partir de un valor que puede ser nulo
          String nullValue = null;
          Optional<String> optionalNull = Optional.ofNullable(nullValue);
          System.out.println("Optional from null value: " + optionalNull);
          
          // Obtener el valor dentro de un Optional
          String val = value.get();
          System.out.println("Value inside Optional: " + val);
          
          // Probar si un Optional est√° presente
          boolean isPresent = value.isPresent();
          System.out.println("Is value present? " + isPresent);
          
          // Proporcionar un valor por defecto si un Optional est√° vac√≠o
          String defaultValue = empty.orElse("Default Value");
          System.out.println("Value from empty Optional with default: " + defaultValue);
      }
  }
</code>
</pre>


El resultado de ejecutar este c√≥digo ser√≠a:

```java
  Empty Optional: Optional.empty
  Optional with value: Optional[Value]
  Optional from null value: Optional.empty
  Value inside Optional: Value
  Is value present? true
  Value from empty Optional with default: Default Value

```

### **Interfaces**

Solemos empezar por lo concreto e ir a lo general, no obstante es conveniente entender que la programacion tiene que ser vista como el uso de entidades m√°s abstractas con funcionalidades que pueden variar dependiendo del scope.

In Java, an interface is a blueprint for classes. It specifies a set of methods that a class must implement, but it does not provide any implementation for these methods. An interface is defined using the interface keyword, and it can contain method signatures (declarations), constant variables, and default methods (methods with a default implementation).

Here's an example of an interface in Java:

```java
public interface Shape {
   double PI = 3.14;

   double calculateArea();

   double calculatePerimeter();
}
```
In this example, the Shape interface defines two methods calculateArea and calculatePerimeter that any class that implements this interface must provide an implementation for. The interface also defines a constant PI that can be used by any class that implements this interface.

A class that implements an interface must provide an implementation for all of the methods declared in the interface. Here's an example of a class that implements the Shape interface:

```java
public class Circle implements Shape {
   private double radius;

   public Circle(double radius) {
      this.radius = radius;
   }

   @Override
   public double calculateArea() {
      return PI * radius * radius;
   }

   @Override
   public double calculatePerimeter() {
      return 2 * PI * radius;
   }
}
````

In this example, the Circle class implements the Shape interface and provides implementations for the calculateArea and calculatePerimeter methods. The Circle class can now be used wherever a Shape is expected. This allows for a degree of polymorphism and code reuse, as the specific type of Shape being used can be changed at runtime, as long as it implements the Shape interface.


Here's an example of using an interface in Java:

```java
Javapublic interface Shape {
   double PI = 3.14;

   double calculateArea();

   double calculatePerimeter();
}

public class Circle implements Shape {
   private double radius;

   public Circle(double radius) {
      this.radius = radius;
   }

   @Override
   public double calculateArea() {
      return PI * radius * radius;
   }

   @Override
   public double calculatePerimeter() {
      return 2 * PI * radius;
   }
}

public class Main {
   public static void main(String[] args) {
      Shape shape = new Circle(5.0);
      System.out.println("Area of the circle: " + shape.calculateArea());
      System.out.println("Perimeter of the circle: " + shape.calculatePerimeter());
   }
}
```

In this example, we first define the Shape interface with two methods calculateArea and calculatePerimeter. Then, we create a class Circle that implements the Shape interface and provides implementations for the methods defined in the interface. Finally, in the Main class, we create an object of the Circle class and use it as if it were an object of the Shape interface.

You can also have multiple classes implementing the same interface, and you can use them interchangeably as long as they are referenced as objects of the interface type.


## **Class 13/02/2023: JavaSE **

Spirng --> lo inicializamos con el spring init. con el lombok, junit, thymeleaf, spring web, spring boot devtools, h2 database, faker(a posteriori)

en el intelljidea lo abrimos (ahora en el)

creamos la aclase book controller

```java
//HelloController.java
@RestController //publica datos como apirest
public class HelloRestController{

  @GetMapping("/hello")
  public String helloWorld(){
    return "Hello world";
  }
}

//HelloWebController.java
@Controller
public class HelloController{

  //path
  @RequestMapping("/helloweb")
  public String helloHandler(){
    return "hi.html";//es un path

  }
}
```
en el dominio resources colocaremos todo lo static(video, sonido, imagenes)

en el dominio template iran los templates de los datos a entregar


## **Class 15/02/2023: **

```Java
public static String bookReturn("...",reader){
  //borrow=null
  //find Borrow with id[Book,User,Borrow]? or creating a method called public Static Borrow findBorrowByBook and the same with User
  //SetStatus&check
  //return String
}

public Static Borrow findBorrowByBook(){

}
```

## **Class 20/02/2023: Spring**

Spring Boot Resources at wiki AlbertProfe

**Must study Git**
[Learn Git using a web with a graphical interface](https://learngitbranching.js.org/?locale=es_ES)

:::{.callout-note}
- **Abstract classes** not creates objects of an a project with interfaces

- If **creates objects** it is a **superclass**
:::

## **Class 22/02/2023: Spring**

First picnic of a project SpringBoot

On a html file we define domains, the html ask a server with an a general @Controller or more controller like @UserController @LibrarianController ... that manages a dB  

On the example of the library lab we have the domains 
/user (private)
/librarian (private)
/web (part public on the web that all users can see without login)

For example on user of the Server that implements methods of the controller listen requests and sends a response with api-rest html or websocket ...

### **How to create a dB quickly for testing**

H2 Database Engine(Java SQL database)

Hay que pulsar en el icono y crear una nueva dB para crear una consola que se ejecutar√° en web como localhost (debemos configurar la url o copiar de la salida en consola en local) tras crear la dB pegamos la url y accedemos a la web. Usamos "Generic H2 (Server)" en JDBC URL usamos "jdbc:h2:[url]"

On our projeject springboot we use the application.propierties to modify the parameters. For example specify the URL of our database

.DLL --> first of all


## **Class 23/02/2023: Spring**








