---
title: Febraury 2023
---

![](../img/February.jpeg){fig-align="center" width=100%}

## **Class 1/02/2023: LibraryProject: define priorities and code test**

![](../img/calse-01-02.png){fig-align="center" width=150%}


ðŸ“˜ Linux Lab#SE03-2: Library/Book Sprint Zero

Before define what a Sprint Zero really is, letâ€™s see what it isnâ€™t.

- A Sprint Zero is not the phase in which the team is put together. In order to conduct a Sprint in the first place, a team must already be in place.
- A Sprint Zero is not the phase for setting up infrastructure which should already be implemented or easily implemented on demand, but not as part of a Sprint Zero.
- A Sprint Zero should not involve adding products to a backlog or Consider Planning.

The main goal of a Sprint Zero is to deliver some usable value that can be built upon by the next team. Sprint Zeros are required to:

- Create the projectâ€™s **skeleton**, including research spikes.
- **Keep design minimal**.ep design minimal
- Develop a small number of **stories** to completion.
- Be low velocity and lightweight.

More specifically, the deliverables of a Sprint Zero should be as follows:

- A **usable** piece of code, however small.
- A *+minimal** environment for writing code.
- A **prioritization** of features or a list of stories.
- A **release plan** assigning each story to a Sprint.
- A plan for the most likely implementation of **features**.


### Sprint Zero: mock-up

    Options:

    1- Make a Borrow

    2- User Management

    3- Book Management

    4- Quit

    Option?

    'Borrow'

    User?

    '159742OPI'

    Book?

    'Anna Karenina'

    Proceed, are your sure?

    'Yes'
    
    Borrow made, borrowId: RER7567, dueDate: 15/02/2023 

    Options:

    1- Make a Borrow

    2- User Management

    3- Book Management

    4- Quit

    Option?

    'Quit'

### **Random ID's**

Calss UUID creates id with 128 bit value

    Public static String = createID(){
        UUID uuid = UUID.randomUUID();
        String id = uuid.toString();
        return id;
    }

::: {.callout-comment}
We need an random ID for all the objects that requires it. 
:::

## **Class 2/02/2023: Quarto: using API Rest with D3.js**

Implementar dentro de quarto el ejercicio o entrada observable (Quarto Markdown: code & data)

Rest tipo de arquitectura para hacer webs

**REST (Representational State Transfer)**

- Rest is an architectural style for building web services.

- It is based on a client-server model, where a client sends a request to a server and the server sends a response.

- RESTful APIs use HTTP requests to POST (create), PUT (update), GET (read), and DELETE (delete) data.

- A RESTful API is a simple, consistent, and easy-to-use way for applications to communicate with each other over the internet.

Ventajas apirest bien para volumen y complejidad pero no para tiempo real, usariamos en el ultimo caso websocket


## **Class 03/02/2023: SCRUM, Vocabulary, Four-Hats & Devops CIFO**


- SCRUM: delete (step 2 spaceX)
- Vocabulary
- Four-Hats: Project/DDD/UML/code
- Cifo Java AppWeb Service Infrastructure: servers, services, network, URL	

## **Class 08/02/2023: JavaSE Laboratory**

El viernes haremos introducciÃ³n a spring aÃ±adiendo unas 5 dependencias mas ademas de Faker, Lombook y Junit

Hoy continuamos con el laboratorio del dÃ­a 01/02/2023

Transformar en tabla:

(1st Column)Spring Backlog:

<p style="text-align:left" class = "table_Colored_Red"> CODE </p>
<p style="text-align:left" class = "table_Colored_Blue"> UMl</p>
<p style="text-align:left" class = "table_Colored_Green"> PROJECT</p>
<p style="text-align:left" class = "table_Colored_Magenta"> DOMAIN</p>


- (Code) TestBorrow x
- (UML) UML Manager
- (UML) UMLCore
- (Project) Use Case
- (Project) MockUp
- (Project) Documentation
- (Domains) Common Language
- (Code) BookManager x
- (Code) BorrowManager x
- (Code) UserManager x
- (Code) AuthorManager x
- (Code) Fakers x
- (Code) Refactor UserInterface x
- (Domain) Define userId (UUID)
- (Project) Bussiness Model
- (Project) Git Tech
- (Project) Git Documentation
- (Project) Git Roles
- (Code) Git INIT x
- (Project & UML) Functional Diagramm
- (Poject) Storage
- (Project) Sprint Goal
- (Project) The concept of done
- (Project) Release Plan
- (Code) Sandbox x

(2st To-do)Spring Backlog:

(3st Doing)Spring Backlog:

(4st Done)Spring Backlog:



<table>
  <thead>
    <tr>
      <th style="text-align:center" >Spring Backlog</th>
      <th style="text-align:center">To-do</th>
      <th style="text-align:center">Doing</th>
      <th style="text-align:center">Done</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class="table_Colored_Red">TestBorrow</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">BookManager</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">BorrowManager</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">UserManager</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">AuthorManager</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">Fakers</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">Refactor UserInterface</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">Git INIT</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      <td class="table_Colored_Red">Sandbox</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
      <td style="text-align:center">###</td>
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
    <tr>
      
    </tr>
  </tbody>
</table>


## **Class 09/02/2023: JavaSE Laboratory**

