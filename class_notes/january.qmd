---
title: "January 2023"
---

![](../img/january.png){fig-align="mid" width=50%}

## **Class 10/01/2023: JavaSE **

Objective : JavaSE --> Spring

We can pass the model that creates objects @Entity 

SpringInitializr tool
Pom is used to scale and to create different profiles.

Java Faker : create fake objects in an easy way.

## **Class 11/01/2023: JavaSE **

Test 
  @Test //inside the class test
  public void test1(){
    Faker faker = new Faker();
    String quote = faker.backToTheFuture().quote();
  }

## **Class 12/01/2023: Coupling **

DDD <--> Coupling : working with domains is related to coupling

////#####//////


## **Class 31/01/2023: **

::: {.callout-note}
Goal move to spring boot
:::

We will use a method to create many objects (Book,User ...)

When working on a project, you must always take into account the pom

::: {.callout-tip}
We can make refactor in intelljidea to change the variables, objects and classes recursively.
:::

### **Borrow & BorrowManager (En el domino Storage)**

#### **--> Borrow**
    @Data
    @AllArgsConstructor
    @NoArgsConstrutor
    public class Borrow{
        private Date initialBorrow, dueDate, returnDate;
    }
 
### **Test**

How we define the borrow class and implement the tests.

    public class makeBorrowTest{

        @Test
        public void createBorrowTest(){

        }

        @Test
        public void createInputByConsoleBorrowTest(){
            // String input with yes to borrow, select bok and proceed yes and borrow done
            //UserInterface.start();
            //assertEquals with new obkect Borrow created see if it exists in hashmap
        }
    }

```{mermaid}
flowchart TB
  A[ Borrow? ] --> B(yes)
  B --> C{ User? }
  C --> D[ fails : User? ]
  D --> C
  C --> E( ok : Displays User)
  E --> F[Book? ]
  F --> G(Displays book)
  G --> H[Proceed? ]
  H --> I(yes)
  I --> J[finish borrow]
```

# **Utils**

```{mermaid}
%%| fig-width: 2
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
```


```{mermaid}
%%| fig-width: 2
flowchart LR
  A[Hard edge] --> B(Round edge)
  B --> C{Decision}
  C --> D[Result one]
  C --> E[Result two]
```

```{mermaid}
%%| fig-width: 4
sequenceDiagram
  participant Alice
  participant Bob
  Alice->>John: Hello John, how are you?
  loop Healthcheck
    John->>John: Fight against hypochondria
  end
  Note right of John: Rational thoughts <br/>prevail!
  John-->>Alice: Great!
  John->>Bob: How about you?
  Bob-->>John: Jolly good!
```




