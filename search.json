[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "class_notes/clases.html",
    "href": "class_notes/clases.html",
    "title": "Clases",
    "section": "",
    "text": "December 2022\nJanuary 2023\nFebraury 2023"
  },
  {
    "objectID": "class_notes/december.html#class-12122022-introduction-who-will-you-marry",
    "href": "class_notes/december.html#class-12122022-introduction-who-will-you-marry",
    "title": "December 2022",
    "section": "Class 12/12/2022: Introduction-who will you marry",
    "text": "Class 12/12/2022: Introduction-who will you marry\n\nTool ChatGPT: Web tool\nChatGPT is a model which interacts in a conversational way. The dialogue format makes it possible for ChatGPT to answer followup questions, admit its mistakes, challenge incorrect premises, and reject inappropriate requests. ChatGPT is a sibling model to InstructGPT, which is trained to follow an instruction in a prompt and provide a detailed response.\n\n\nQuarto\nQuarto is an open-source scientific and technical publishing system built on Pandoc It works with files .qmd (quarto mark down)\n\n\nRecomended dependencies on a project with maven\n\n\nlombok : Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.\n\n\njunit v.5 : JUnit 5 is the next generation of JUnit. The goal is to create an up-to-date foundation for developer-side testing on the JVM. This includes focusing on Java 8 and above, as well as enabling many different styles of testing.\n\n\n\n\nLab excercice : Lab#MD01-1: Create and publish by Quarto\n\n\n\n\nflowchart LR\n  A[Install VSCode] --> B[Install Quarto]\n  B --> C[Configure Repo GitHub and Git]\n  C --> D[Deploy Quarto on GH-Pages]\n\n\n\n\n\n\n\n\n\nLab#MD01-1"
  },
  {
    "objectID": "class_notes/december.html#class-13122022-structure",
    "href": "class_notes/december.html#class-13122022-structure",
    "title": "December 2022",
    "section": "Class 13/12/2022: Structure",
    "text": "Class 13/12/2022: Structure\n\nApps: VSCode, IntellJIdea, Quarto, GitHub, Git …\n\nIntellJIdea option to create java projects but I use the VSCode to develop it.\n\nStructure of the Project\n\nTree : My project structure\nPom : dependencies that must be on the root of the project\nWhere is my project"
  },
  {
    "objectID": "class_notes/december.html#class-14122022-scope",
    "href": "class_notes/december.html#class-14122022-scope",
    "title": "December 2022",
    "section": "Class 14/12/2022: Scope",
    "text": "Class 14/12/2022: Scope\n\nComentary : GitHub update my project on my remote repository:\n(Stage --> Commit --> Push)\nMy Commits stucture:\n#[Nº]#Type#Description \nClass Java Structure:\npublic class Person {\n\nFields –> declaration of the variables to define the class\nConstructor –> Witch values must have the objects of the class\nMethods –> Habilities of the Objects\n\n}\nSteps :\n\nCreate test with Maven\nAdd the depencies Junit, Lombok, Faker on the .pom"
  },
  {
    "objectID": "class_notes/december.html#class-15122022-what-is-an-object",
    "href": "class_notes/december.html#class-15122022-what-is-an-object",
    "title": "December 2022",
    "section": "Class 15/12/2022: What is an Object?",
    "text": "Class 15/12/2022: What is an Object?\n\nObject on Java\n\nA Java object is a member (also called an instance) of a Java class. Each object has an identity, a behavior and a state. The state of an object is stored in fields (variables), while methods (functions) display the object’s behavior. Objects are created at runtime from templates, which are also known as classes.\n\n\n\nComposition / Inherence :\n\nComposition : The composition is one form of Association. The composition can be defined as an association in which one class contains another class and this contained class depends on the containing class in such a way that it cannot exist independently.\nWe have seen an example of a has-a relationship above. In that, we had a car object which has an engine. This is an example of composition. In this, an engine cannot exist independently without a car.\nThe composition is more restricted when compared to Aggregation. The composition is not a Java feature. It is mainly considered a design technique.\nInheritance :\nInheritance is a fundamental concept in object-oriented programming. It is the process of creating new classes from existing classes.\nIn other words, it is the process of deriving new classes from existing classes, which allows developers to reuse and extend the functionality of existing classes.\n\n\n\n\n\nclassDiagram\n    \n    Animal <|-- Duck\n    Animal <|-- Fish\n    Animal <|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n        +String beakColor\n        +swim()\n        +quack()\n    }\n    class Fish{\n        -int sizeInFeet\n        -canEat()\n    }\n    class Zebra{\n        +bool is_wild\n        +run()\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\nclassDiagram\n\nclassA --|> classB : Inheritance\nclassC --* classD : Composition\nclassE --o classF : Aggregation\nclassG --> classH : Association\nclassI -- classJ : Link(Solid)\nclassK ..> classL : Dependency\nclassM ..|> classN : Realization\nclassO .. classP : Link(Dashed)"
  },
  {
    "objectID": "class_notes/december.html#class-16122022-static",
    "href": "class_notes/december.html#class-16122022-static",
    "title": "December 2022",
    "section": "Class 16/12/2022: Static",
    "text": "Class 16/12/2022: Static\nOn Java SE Static “indicates that it belongs to the class itself, all instances of the class share the same field”"
  },
  {
    "objectID": "class_notes/december.html#class-19122022-models-introduction",
    "href": "class_notes/december.html#class-19122022-models-introduction",
    "title": "December 2022",
    "section": "Class 19/12/2022: Models (introduction)",
    "text": "Class 19/12/2022: Models (introduction)\nObjects are created with the “new” operator but can be implemented in more ways\n\nClasic : Person carla = new Person();\n\nThere will be classes that create other objects and others that do not.\nThe whole structure of the project is called Model View Controller (MVC).\nThere is a mechanism called Singelton (single instance)."
  },
  {
    "objectID": "class_notes/december.html#class-20122022-github-quarto",
    "href": "class_notes/december.html#class-20122022-github-quarto",
    "title": "December 2022",
    "section": "Class 20/12/2022: GitHub & Quarto",
    "text": "Class 20/12/2022: GitHub & Quarto\nI make this Quarto project published on GitHub"
  },
  {
    "objectID": "class_notes/december.html#class-21122022",
    "href": "class_notes/december.html#class-21122022",
    "title": "December 2022",
    "section": "Class 21/12/2022: ",
    "text": "Class 21/12/2022: \nThymeleaf –> modern server-side template engine"
  },
  {
    "objectID": "class_notes/december.html#class-22122022",
    "href": "class_notes/december.html#class-22122022",
    "title": "December 2022",
    "section": "Class 22/12/2022: ",
    "text": "Class 22/12/2022: \nIt is possible to have more than one constructor (“constructor overload”). With Loombok you can define a more compact class without having to implement the most essential methods. @Data @NoArgsConstructor @AllArgsConstructor"
  },
  {
    "objectID": "class_notes/december.html#class-23122022-facing-problems-in-different-ways",
    "href": "class_notes/december.html#class-23122022-facing-problems-in-different-ways",
    "title": "December 2022",
    "section": "Class 23/12/2022: Facing problems in different ways ",
    "text": "Class 23/12/2022: Facing problems in different ways"
  },
  {
    "objectID": "class_notes/january.html#class-10012023-javase",
    "href": "class_notes/january.html#class-10012023-javase",
    "title": "January 2023",
    "section": "Class 10/01/2023: JavaSE ",
    "text": "Class 10/01/2023: JavaSE \nObjective : JavaSE –> Spring\nWe can pass the model that creates objects @Entity\nSpringInitializr tool Pom is used to scale and to create different profiles.\nJava Faker : create fake objects in an easy way."
  },
  {
    "objectID": "class_notes/january.html#class-11012023-javase",
    "href": "class_notes/january.html#class-11012023-javase",
    "title": "January 2023",
    "section": "Class 11/01/2023: JavaSE ",
    "text": "Class 11/01/2023: JavaSE \nTest @Test //inside the class test public void test1(){ Faker faker = new Faker(); String quote = faker.backToTheFuture().quote(); }"
  },
  {
    "objectID": "class_notes/january.html#class-12012023-coupling",
    "href": "class_notes/january.html#class-12012023-coupling",
    "title": "January 2023",
    "section": "Class 12/01/2023: Coupling ",
    "text": "Class 12/01/2023: Coupling \nDDD <–> Coupling : working with domains is related to coupling\n////#####//////"
  },
  {
    "objectID": "class_notes/january.html#class-31012023",
    "href": "class_notes/january.html#class-31012023",
    "title": "January 2023",
    "section": "Class 31/01/2023: ",
    "text": "Class 31/01/2023: \n\n\n\n\n\n\nNote\n\n\n\nGoal move to spring boot\n\n\nWe will use a method to create many objects (Book,User …)\nWhen working on a project, you must always take into account the pom\n\n\n\n\n\n\nTip\n\n\n\nWe can make refactor in intelljidea to change the variables, objects and classes recursively.\n\n\n\nBorrow & BorrowManager (En el domino Storage)\n\n–> Borrow\n@Data\n@AllArgsConstructor\n@NoArgsConstrutor\npublic class Borrow{\n    private Date initialBorrow, dueDate, returnDate;\n}\n\n\n\nTest\nHow we define the borrow class and implement the tests.\npublic class makeBorrowTest{\n\n    @Test\n    public void createBorrowTest(){\n\n    }\n\n    @Test\n    public void createInputByConsoleBorrowTest(){\n        // String input with yes to borrow, select bok and proceed yes and borrow done\n        //UserInterface.start();\n        //assertEquals with new obkect Borrow created see if it exists in hashmap\n    }\n}\n\n\n\n\nflowchart TB\n  A[ Borrow? ] --> B(yes)\n  B --> C{ User? }\n  C --> D[ fails : User? ]\n  D --> C\n  C --> E( ok : Displays User)\n  E --> F[Book? ]\n  F --> G(Displays book)\n  G --> H[Proceed? ]\n  H --> I(yes)\n  I --> J[finish borrow]"
  },
  {
    "objectID": "class_notes/febraury.html#class-1022023-libraryproject-define-priorities-and-code-test",
    "href": "class_notes/febraury.html#class-1022023-libraryproject-define-priorities-and-code-test",
    "title": "Febraury 2023",
    "section": "Class 1/02/2023: LibraryProject: define priorities and code test",
    "text": "Class 1/02/2023: LibraryProject: define priorities and code test\n\n\n\n\n\n📘 Linux Lab#SE03-2: Library/Book Sprint Zero\nBefore define what a Sprint Zero really is, let’s see what it isn’t.\n\nA Sprint Zero is not the phase in which the team is put together. In order to conduct a Sprint in the first place, a team must already be in place.\nA Sprint Zero is not the phase for setting up infrastructure which should already be implemented or easily implemented on demand, but not as part of a Sprint Zero.\nA Sprint Zero should not involve adding products to a backlog or Consider Planning.\n\nThe main goal of a Sprint Zero is to deliver some usable value that can be built upon by the next team. Sprint Zeros are required to:\n\nCreate the project’s skeleton, including research spikes.\nKeep design minimal.ep design minimal\nDevelop a small number of stories to completion.\nBe low velocity and lightweight.\n\nMore specifically, the deliverables of a Sprint Zero should be as follows:\n\nA usable piece of code, however small.\nA *+minimal** environment for writing code.\nA prioritization of features or a list of stories.\nA release plan assigning each story to a Sprint.\nA plan for the most likely implementation of features.\n\n\nSprint Zero: mock-up\nOptions:\n\n1- Make a Borrow\n\n2- User Management\n\n3- Book Management\n\n4- Quit\n\nOption?\n\n'Borrow'\n\nUser?\n\n'159742OPI'\n\nBook?\n\n'Anna Karenina'\n\nProceed, are your sure?\n\n'Yes'\n\nBorrow made, borrowId: RER7567, dueDate: 15/02/2023 \n\nOptions:\n\n1- Make a Borrow\n\n2- User Management\n\n3- Book Management\n\n4- Quit\n\nOption?\n\n'Quit'\n\n\nRandom ID’s\nCalss UUID creates id with 128 bit value\nPublic static String = createID(){\n    UUID uuid = UUID.randomUUID();\n    String id = uuid.toString();\n    return id;\n}\n\n\n\n\n\n\nComment\n\n\n\nWe need an random ID for all the objects that requires it."
  },
  {
    "objectID": "index.html#what-you-can-fin-on-this-quarto-web",
    "href": "index.html#what-you-can-fin-on-this-quarto-web",
    "title": "Author: David Marchan del Pino",
    "section": "What you can fin on this Quarto web?",
    "text": "What you can fin on this Quarto web?\n\n\nMy course notes fom the CIFO course\n\n\nThe resolution of the laboratories and the links of my repos with the code\n\n\nTo-do task that I consider or other task provided by the profesor (not implemented)\n\n\nSome tools that I use to perform my solutions and other functionalities that I am curious abaut (to-do)"
  },
  {
    "objectID": "labs/Lab-MD01-1.html",
    "href": "labs/Lab-MD01-1.html",
    "title": "Lab#MD01-1",
    "section": "",
    "text": "This is the Repo link\n\n\nPS C:\\Users\\AdministradorCIFO\\Desktop\\Projects\\Documentation> quarto publish gh-pages\n? Update site at https://daviddevops96.github.io/Documentation/? (Y/n) » Yes\nFrom https://github.com/daviddevops96/Documentation\n* branch            gh-pages   -> FETCH_HEAD\nRendering for publish:\n\n[1/9] 404.qmd\n[2/9] about.qmd\n[3/9] class_notes\\december.qmd\n[4/9] index.qmd\n[5/9] labs\\MarkUp\\Lab#MD01-1.qmd\n[6/9] sanbox_funcionalities\\sandbox.qmd\n[7/9] todo\\ideas.qmd\n[8/9] todo\\todo-class.qmd\n[9/9] tools\\tools.qmd\n\nbranch 'gh-pages' set up to track 'origin/gh-pages'.\nHEAD is now at 3c46989 Built site for gh-pages\nPreparing worktree (resetting branch 'gh-pages'; was at 3c46989)\nwarning: in the working copy of '404.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'about.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'class_notes/december.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'index.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'labs/MarkUp/Lab#MD01-1.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'robots.txt', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'sanbox_funcionalities/sandbox.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'search.json', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/bootstrap/bootstrap-dark.min.css', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/bootstrap/bootstrap-icons.css', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/bootstrap/bootstrap.min.css', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/bootstrap/bootstrap.min.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/clipboard/clipboard.min.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-html/anchor.min.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-html/popper.min.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-html/quarto-syntax-highlighting-dark.css', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-html/quarto-syntax-highlighting.css', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-html/quarto.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-html/tippy.umd.min.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-nav/headroom.min.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-nav/quarto-nav.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-search/autocomplete.umd.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-search/fuse.min.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-search/quarto-search.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'sitemap.xml', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'todo/ideas.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'todo/todo-class.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'tools/tools.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-diagram/mermaid-init.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-diagram/mermaid.css', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-diagram/mermaid.min.js', LF will be replaced by CRLF the next time Git touches it\n[gh-pages 7409b31] Built site for gh-pages\n16 files changed, 341 insertions(+), 26 deletions(-)\ncreate mode 100644 labs/MarkUp/Lab#MD01-1.qmd\ncreate mode 100644 site_libs/quarto-diagram/mermaid-init.js\ncreate mode 100644 site_libs/quarto-diagram/mermaid.css\ncreate mode 100644 site_libs/quarto-diagram/mermaid.min.js\norigin  https://github.com/daviddevops96/Documentation.git (fetch)\norigin  https://github.com/daviddevops96/Documentation.git (push)\nTo https://github.com/daviddevops96/Documentation.git\n3c46989..7409b31  HEAD -> gh-pages\n\nNOTE: GitHub Pages sites use caching so you might need to click the refresh\nbutton within your web browser to see changes after deployment.\n\n[>] Deploying gh-pages branch to website (this may take a few minutes)\n[>] Published to https://daviddevops96.github.io/Documentation/"
  },
  {
    "objectID": "labs/labs.html",
    "href": "labs/labs.html",
    "title": "Labs",
    "section": "",
    "text": "Lab#MD01-1"
  }
]