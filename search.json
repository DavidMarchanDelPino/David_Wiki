[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "///Imagen mia\nlink al repo GH"
  },
  {
    "objectID": "class_notes/clases.html",
    "href": "class_notes/clases.html",
    "title": "Clases",
    "section": "",
    "text": "December 2022\nJanuary 2023\nFebraury 2023"
  },
  {
    "objectID": "class_notes/december.html#class-12122022-introduction-who-will-you-marry",
    "href": "class_notes/december.html#class-12122022-introduction-who-will-you-marry",
    "title": "December 2022",
    "section": "Class 12/12/2022: Introduction-who will you marry",
    "text": "Class 12/12/2022: Introduction-who will you marry\n\nTool ChatGPT: Web tool\nChatGPT is a model which interacts in a conversational way. The dialogue format makes it possible for ChatGPT to answer followup questions, admit its mistakes, challenge incorrect premises, and reject inappropriate requests. ChatGPT is a sibling model to InstructGPT, which is trained to follow an instruction in a prompt and provide a detailed response.\n\n\nQuarto\nQuarto is an open-source scientific and technical publishing system built on Pandoc It works with files .qmd (quarto mark down)\n\n\nRecomended dependencies on a project with maven\n\n\nlombok : Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.Never write another getter or equals method again, with one annotation your class has a fully featured builder, Automate your logging variables, and much more.\n\n\njunit v.5 : JUnit 5 is the next generation of JUnit. The goal is to create an up-to-date foundation for developer-side testing on the JVM. This includes focusing on Java 8 and above, as well as enabling many different styles of testing.\n\n\n\n\nLab excercice : Lab#MD01-1: Create and publish by Quarto\n\n\n\n\nflowchart LR\n  A[Install VSCode] --> B[Install Quarto]\n  B --> C[Configure Repo GitHub and Git]\n  C --> D[Deploy Quarto on GH-Pages]\n\n\n\n\n\n\n\n\n\nLab#MD01-1"
  },
  {
    "objectID": "class_notes/december.html#class-13122022-structure",
    "href": "class_notes/december.html#class-13122022-structure",
    "title": "December 2022",
    "section": "Class 13/12/2022: Structure",
    "text": "Class 13/12/2022: Structure\n\nApps: VSCode, IntellJIdea, Quarto, GitHub, Git …\n\nIntellJIdea option to create java projects but I use the VSCode to develop it.\n\nStructure of the Project\n\nTree : My project structure\nPom : dependencies that must be on the root of the project\nWhere is my project"
  },
  {
    "objectID": "class_notes/december.html#class-14122022-scope",
    "href": "class_notes/december.html#class-14122022-scope",
    "title": "December 2022",
    "section": "Class 14/12/2022: Scope",
    "text": "Class 14/12/2022: Scope\n\nComentary : GitHub update my project on my remote repository:\n(Stage --> Commit --> Push)\nMy Commits stucture:\n#[Nº]#Type#Description \nClass Java Structure:\npublic class Person {\n\nFields –> declaration of the variables to define the class\nConstructor –> Witch values must have the objects of the class\nMethods –> Habilities of the Objects\n\n}\nSteps :\n\nCreate test with Maven\nAdd the depencies Junit, Lombok, Faker on the .pom"
  },
  {
    "objectID": "class_notes/december.html#class-15122022-what-is-an-object",
    "href": "class_notes/december.html#class-15122022-what-is-an-object",
    "title": "December 2022",
    "section": "Class 15/12/2022: What is an Object?",
    "text": "Class 15/12/2022: What is an Object?\n\nObject on Java\n\nA Java object is a member (also called an instance) of a Java class. Each object has an identity, a behavior and a state. The state of an object is stored in fields (variables), while methods (functions) display the object’s behavior. Objects are created at runtime from templates, which are also known as classes.\n\n\n\nComposition / Inherence :\n\nComposition : The composition is one form of Association. The composition can be defined as an association in which one class contains another class and this contained class depends on the containing class in such a way that it cannot exist independently.\nWe have seen an example of a has-a relationship above. In that, we had a car object which has an engine. This is an example of composition. In this, an engine cannot exist independently without a car.\nThe composition is more restricted when compared to Aggregation. The composition is not a Java feature. It is mainly considered a design technique.\nInheritance :\nInheritance is a fundamental concept in object-oriented programming. It is the process of creating new classes from existing classes.\nIn other words, it is the process of deriving new classes from existing classes, which allows developers to reuse and extend the functionality of existing classes.\n\n\n\n\n\nclassDiagram\n    \n    Animal <|-- Duck\n    Animal <|-- Fish\n    Animal <|-- Zebra\n    Animal : +int age\n    Animal : +String gender\n    Animal: +isMammal()\n    Animal: +mate()\n    class Duck{\n        +String beakColor\n        +swim()\n        +quack()\n    }\n    class Fish{\n        -int sizeInFeet\n        -canEat()\n    }\n    class Zebra{\n        +bool is_wild\n        +run()\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\nclassDiagram\n\nclassA --|> classB : Inheritance\nclassC --* classD : Composition\nclassE --o classF : Aggregation\nclassG --> classH : Association\nclassI -- classJ : Link(Solid)\nclassK ..> classL : Dependency\nclassM ..|> classN : Realization\nclassO .. classP : Link(Dashed)"
  },
  {
    "objectID": "class_notes/december.html#class-16122022-static",
    "href": "class_notes/december.html#class-16122022-static",
    "title": "December 2022",
    "section": "Class 16/12/2022: Static",
    "text": "Class 16/12/2022: Static\nOn Java SE Static “indicates that it belongs to the class itself, all instances of the class share the same field”"
  },
  {
    "objectID": "class_notes/december.html#class-19122022-models-introduction",
    "href": "class_notes/december.html#class-19122022-models-introduction",
    "title": "December 2022",
    "section": "Class 19/12/2022: Models (introduction)",
    "text": "Class 19/12/2022: Models (introduction)\nObjects are created with the “new” operator but can be implemented in more ways\n\nClasic : Person carla = new Person();\n\nThere will be classes that create other objects and others that do not.\nThe whole structure of the project is called Model View Controller (MVC).\nThere is a mechanism called Singelton (single instance)."
  },
  {
    "objectID": "class_notes/december.html#class-20122022-github-quarto",
    "href": "class_notes/december.html#class-20122022-github-quarto",
    "title": "December 2022",
    "section": "Class 20/12/2022: GitHub & Quarto",
    "text": "Class 20/12/2022: GitHub & Quarto\nI make this Quarto project published on GitHub"
  },
  {
    "objectID": "class_notes/december.html#class-21122022",
    "href": "class_notes/december.html#class-21122022",
    "title": "December 2022",
    "section": "Class 21/12/2022: ",
    "text": "Class 21/12/2022: \nThymeleaf –> modern server-side template engine"
  },
  {
    "objectID": "class_notes/december.html#class-22122022",
    "href": "class_notes/december.html#class-22122022",
    "title": "December 2022",
    "section": "Class 22/12/2022: ",
    "text": "Class 22/12/2022: \nIt is possible to have more than one constructor (“constructor overload”). With Loombok you can define a more compact class without having to implement the most essential methods. @Data @NoArgsConstructor @AllArgsConstructor"
  },
  {
    "objectID": "class_notes/december.html#class-23122022-facing-problems-in-different-ways",
    "href": "class_notes/december.html#class-23122022-facing-problems-in-different-ways",
    "title": "December 2022",
    "section": "Class 23/12/2022: Facing problems in different ways ",
    "text": "Class 23/12/2022: Facing problems in different ways"
  },
  {
    "objectID": "class_notes/january.html#class-10012023-javase",
    "href": "class_notes/january.html#class-10012023-javase",
    "title": "January 2023",
    "section": "Class 10/01/2023: JavaSE ",
    "text": "Class 10/01/2023: JavaSE \nObjective : JavaSE –> Spring\nWe can pass the model that creates objects @Entity\nSpringInitializr tool Pom is used to scale and to create different profiles.\nJava Faker : create fake objects in an easy way."
  },
  {
    "objectID": "class_notes/january.html#class-11012023-javase",
    "href": "class_notes/january.html#class-11012023-javase",
    "title": "January 2023",
    "section": "Class 11/01/2023: JavaSE ",
    "text": "Class 11/01/2023: JavaSE \nTest @Test //inside the class test public void test1(){ Faker faker = new Faker(); String quote = faker.backToTheFuture().quote(); }"
  },
  {
    "objectID": "class_notes/january.html#class-12012023-coupling",
    "href": "class_notes/january.html#class-12012023-coupling",
    "title": "January 2023",
    "section": "Class 12/01/2023: Coupling ",
    "text": "Class 12/01/2023: Coupling \nDDD <–> Coupling : working with domains is related to coupling\n////#####//////"
  },
  {
    "objectID": "class_notes/january.html#class-31012023",
    "href": "class_notes/january.html#class-31012023",
    "title": "January 2023",
    "section": "Class 31/01/2023: ",
    "text": "Class 31/01/2023: \n\n\n\n\n\n\nNote\n\n\n\nGoal move to spring boot\n\n\nWe will use a method to create many objects (Book,User …)\nWhen working on a project, you must always take into account the pom\n\n\n\n\n\n\nTip\n\n\n\nWe can make refactor in intelljidea to change the variables, objects and classes recursively.\n\n\n\nBorrow & BorrowManager (En el domino Storage)\n\n–> Borrow\n@Data\n@AllArgsConstructor\n@NoArgsConstrutor\npublic class Borrow{\n    private Date initialBorrow, dueDate, returnDate;\n}\n\n\n\nTest\nHow we define the borrow class and implement the tests.\npublic class makeBorrowTest{\n\n    @Test\n    public void createBorrowTest(){\n\n    }\n\n    @Test\n    public void createInputByConsoleBorrowTest(){\n        // String input with yes to borrow, select bok and proceed yes and borrow done\n        //UserInterface.start();\n        //assertEquals with new obkect Borrow created see if it exists in hashmap\n    }\n}\n\n\n\n\nflowchart TB\n  A[ Borrow? ] --> B(yes)\n  B --> C{ User? }\n  C --> D[ fails : User? ]\n  D --> C\n  C --> E( ok : Displays User)\n  E --> F[Book? ]\n  F --> G(Displays book)\n  G --> H[Proceed? ]\n  H --> I(yes)\n  I --> J[finish borrow]"
  },
  {
    "objectID": "class_notes/febraury.html#class-1022023-libraryproject-define-priorities-and-code-test",
    "href": "class_notes/febraury.html#class-1022023-libraryproject-define-priorities-and-code-test",
    "title": "Febraury 2023",
    "section": "Class 1/02/2023: LibraryProject: define priorities and code test",
    "text": "Class 1/02/2023: LibraryProject: define priorities and code test\n\n\n\n\n\n📘 Linux Lab#SE03-2: Library/Book Sprint Zero\nBefore define what a Sprint Zero really is, let’s see what it isn’t.\n\nA Sprint Zero is not the phase in which the team is put together. In order to conduct a Sprint in the first place, a team must already be in place.\nA Sprint Zero is not the phase for setting up infrastructure which should already be implemented or easily implemented on demand, but not as part of a Sprint Zero.\nA Sprint Zero should not involve adding products to a backlog or Consider Planning.\n\nThe main goal of a Sprint Zero is to deliver some usable value that can be built upon by the next team. Sprint Zeros are required to:\n\nCreate the project’s skeleton, including research spikes.\nKeep design minimal.ep design minimal\nDevelop a small number of stories to completion.\nBe low velocity and lightweight.\n\nMore specifically, the deliverables of a Sprint Zero should be as follows:\n\nA usable piece of code, however small.\nA *+minimal** environment for writing code.\nA prioritization of features or a list of stories.\nA release plan assigning each story to a Sprint.\nA plan for the most likely implementation of features.\n\n\nSprint Zero: mock-up\nOptions:\n\n1- Make a Borrow\n\n2- User Management\n\n3- Book Management\n\n4- Quit\n\nOption?\n\n'Borrow'\n\nUser?\n\n'159742OPI'\n\nBook?\n\n'Anna Karenina'\n\nProceed, are your sure?\n\n'Yes'\n\nBorrow made, borrowId: RER7567, dueDate: 15/02/2023 \n\nOptions:\n\n1- Make a Borrow\n\n2- User Management\n\n3- Book Management\n\n4- Quit\n\nOption?\n\n'Quit'\n\n\nRandom ID’s\nCalss UUID creates id with 128 bit value\nPublic static String = createID(){\n    UUID uuid = UUID.randomUUID();\n    String id = uuid.toString();\n    return id;\n}\n\n\n\n\n\n\nComment\n\n\n\nWe need an random ID for all the objects that requires it."
  },
  {
    "objectID": "class_notes/febraury.html#class-2022023-quarto-using-api-rest-with-d3.js",
    "href": "class_notes/febraury.html#class-2022023-quarto-using-api-rest-with-d3.js",
    "title": "Febraury 2023",
    "section": "Class 2/02/2023: Quarto: using API Rest with D3.js",
    "text": "Class 2/02/2023: Quarto: using API Rest with D3.js\nImplementar dentro de quarto el ejercicio o entrada observable (Quarto Markdown: code & data)\nRest tipo de arquitectura para hacer webs\nREST (Representational State Transfer)\n\nRest is an architectural style for building web services.\nIt is based on a client-server model, where a client sends a request to a server and the server sends a response.\nRESTful APIs use HTTP requests to POST (create), PUT (update), GET (read), and DELETE (delete) data.\nA RESTful API is a simple, consistent, and easy-to-use way for applications to communicate with each other over the internet.\n\nVentajas apirest bien para volumen y complejidad pero no para tiempo real, usariamos en el ultimo caso websocket"
  },
  {
    "objectID": "class_notes/febraury.html#class-03022023-scrum-vocabulary-four-hats-devops-cifo",
    "href": "class_notes/febraury.html#class-03022023-scrum-vocabulary-four-hats-devops-cifo",
    "title": "Febraury 2023",
    "section": "Class 03/02/2023: SCRUM, Vocabulary, Four-Hats & Devops CIFO",
    "text": "Class 03/02/2023: SCRUM, Vocabulary, Four-Hats & Devops CIFO\n\nSCRUM: delete (step 2 spaceX)\nVocabulary\nFour-Hats: Project/DDD/UML/code\nCifo Java AppWeb Service Infrastructure: servers, services, network, URL"
  },
  {
    "objectID": "class_notes/febraury.html#class-08022023-javase-laboratory",
    "href": "class_notes/febraury.html#class-08022023-javase-laboratory",
    "title": "Febraury 2023",
    "section": "Class 08/02/2023: JavaSE Laboratory",
    "text": "Class 08/02/2023: JavaSE Laboratory\nEl viernes haremos introducción a spring añadiendo unas 5 dependencias mas ademas de Faker, Lombook y Junit\nHoy continuamos con el laboratorio del día 01/02/2023\nTransformar en tabla:\n(1st Column)Spring Backlog:\n\n\nCODE\n\n\n\nUMl\n\n\n\nPROJECT\n\n\n\nDOMAIN\n\n\n(Code) TestBorrow x\n(UML) UML Manager\n(UML) UMLCore\n(Project) Use Case\n(Project) MockUp\n(Project) Documentation\n(Domains) Common Language\n(Code) BookManager x\n(Code) BorrowManager x\n(Code) UserManager x\n(Code) AuthorManager x\n(Code) Fakers x\n(Code) Refactor UserInterface x\n(Domain) Define userId (UUID)\n(Project) Bussiness Model\n(Project) Git Tech\n(Project) Git Documentation\n(Project) Git Roles\n(Code) Git INIT x\n(Project & UML) Functional Diagramm\n(Poject) Storage\n(Project) Sprint Goal\n(Project) The concept of done\n(Project) Release Plan\n(Code) Sandbox x\n\n(2st To-do)Spring Backlog:\n(3st Doing)Spring Backlog:\n(4st Done)Spring Backlog:\n\n\n\n\n\nSpring Backlog\n\n\nTo-do\n\n\nDoing\n\n\nDone\n\n\n\n\n\n\n\nTestBorrow\n\n\n###\n\n\n###\n\n\n###\n\n\n\n\n\nBookManager\n\n\n###\n\n\n###\n\n\n###\n\n\n\n\n\nBorrowManager\n\n\n###\n\n\n###\n\n\n###\n\n\n\n\n\nUserManager\n\n\n###\n\n\n###\n\n\n###\n\n\n\n\n\nAuthorManager\n\n\n###\n\n\n###\n\n\n###\n\n\n\n\n\nFakers\n\n\n###\n\n\n###\n\n\n###\n\n\n\n\n\nRefactor UserInterface\n\n\n###\n\n\n###\n\n\n###\n\n\n\n\n\nGit INIT\n\n\n###\n\n\n###\n\n\n###\n\n\n\n\n\nSandbox\n\n\n###\n\n\n###\n\n\n###"
  },
  {
    "objectID": "class_notes/febraury.html#class-09022023-javase-laboratory",
    "href": "class_notes/febraury.html#class-09022023-javase-laboratory",
    "title": "Febraury 2023",
    "section": "Class 09/02/2023: JavaSE Laboratory",
    "text": "Class 09/02/2023: JavaSE Laboratory"
  },
  {
    "objectID": "class_notes/febraury.html#class-10022023",
    "href": "class_notes/febraury.html#class-10022023",
    "title": "Febraury 2023",
    "section": "Class 10/02/2023: ",
    "text": "Class 10/02/2023: \nWraper Optional ejemplo y explicación\njava.util.Optional es una clase que se introdujo en Java 8 y se utiliza para representar valores opcionales. Anteriormente, para representar valores que pueden o no estar presentes, se utilizaba null, lo que a menudo resultaba en errores de NullPointerException. Con Optional, puedes representar valores opcionales de una manera más segura y fácil de manejar.\nOptional es un contenedor que puede o no tener un valor dentro. Si un Optional contiene un valor, se dice que está “presente”, de lo contrario, se dice que está “vacío”. Puedes usar métodos como of() o ofNullable() para crear un Optional con un valor dentro, y empty() para crear un Optional vacío.\nUna de las principales ventajas de usar Optional es que te permite manejar el caso en el que un valor puede no estar presente de manera más clara y legible. Por ejemplo, puedes usar el método orElse() para proporcionar un valor por defecto si el Optional está vacío, o el método orElseGet() para proporcionar un valor por defecto a través de un proveedor.\nEn resumen, java.util.Optional es una clase que puede ayudarte a escribir código más seguro y legible al trabajar con valores opcionales en Java.\n\n\n  import java.util.Optional;\n\n  public class OptionalExample {\n      public static void main(String[] args) {\n          // Crear un Optional vacío\n          Optional empty = Optional.empty();\n          System.out.println(\"Empty Optional: \" + empty);\n          \n          // Crear un Optional con un valor\n          Optional value = Optional.of(\"Value\");\n          System.out.println(\"Optional with value: \" + value);\n          \n          // Crear un Optional a partir de un valor que puede ser nulo\n          String nullValue = null;\n          Optional optionalNull = Optional.ofNullable(nullValue);\n          System.out.println(\"Optional from null value: \" + optionalNull);\n          \n          // Obtener el valor dentro de un Optional\n          String val = value.get();\n          System.out.println(\"Value inside Optional: \" + val);\n          \n          // Probar si un Optional está presente\n          boolean isPresent = value.isPresent();\n          System.out.println(\"Is value present? \" + isPresent);\n          \n          // Proporcionar un valor por defecto si un Optional está vacío\n          String defaultValue = empty.orElse(\"Default Value\");\n          System.out.println(\"Value from empty Optional with default: \" + defaultValue);\n      }\n  }\n\n\nEl resultado de ejecutar este código sería:\n  Empty Optional: Optional.empty\n  Optional with value: Optional[Value]\n  Optional from null value: Optional.empty\n  Value inside Optional: Value\n  Is value present? true\n  Value from empty Optional with default: Default Value\n\nInterfaces\nSolemos empezar por lo concreto e ir a lo general, no obstante es conveniente entender que la programacion tiene que ser vista como el uso de entidades más abstractas con funcionalidades que pueden variar dependiendo del scope.\nIn Java, an interface is a blueprint for classes. It specifies a set of methods that a class must implement, but it does not provide any implementation for these methods. An interface is defined using the interface keyword, and it can contain method signatures (declarations), constant variables, and default methods (methods with a default implementation).\nHere’s an example of an interface in Java:\npublic interface Shape {\n   double PI = 3.14;\n\n   double calculateArea();\n\n   double calculatePerimeter();\n}\nIn this example, the Shape interface defines two methods calculateArea and calculatePerimeter that any class that implements this interface must provide an implementation for. The interface also defines a constant PI that can be used by any class that implements this interface.\nA class that implements an interface must provide an implementation for all of the methods declared in the interface. Here’s an example of a class that implements the Shape interface:\npublic class Circle implements Shape {\n   private double radius;\n\n   public Circle(double radius) {\n      this.radius = radius;\n   }\n\n   @Override\n   public double calculateArea() {\n      return PI * radius * radius;\n   }\n\n   @Override\n   public double calculatePerimeter() {\n      return 2 * PI * radius;\n   }\n}\nIn this example, the Circle class implements the Shape interface and provides implementations for the calculateArea and calculatePerimeter methods. The Circle class can now be used wherever a Shape is expected. This allows for a degree of polymorphism and code reuse, as the specific type of Shape being used can be changed at runtime, as long as it implements the Shape interface.\nHere’s an example of using an interface in Java:\nJavapublic interface Shape {\n   double PI = 3.14;\n\n   double calculateArea();\n\n   double calculatePerimeter();\n}\n\npublic class Circle implements Shape {\n   private double radius;\n\n   public Circle(double radius) {\n      this.radius = radius;\n   }\n\n   @Override\n   public double calculateArea() {\n      return PI * radius * radius;\n   }\n\n   @Override\n   public double calculatePerimeter() {\n      return 2 * PI * radius;\n   }\n}\n\npublic class Main {\n   public static void main(String[] args) {\n      Shape shape = new Circle(5.0);\n      System.out.println(\"Area of the circle: \" + shape.calculateArea());\n      System.out.println(\"Perimeter of the circle: \" + shape.calculatePerimeter());\n   }\n}\nIn this example, we first define the Shape interface with two methods calculateArea and calculatePerimeter. Then, we create a class Circle that implements the Shape interface and provides implementations for the methods defined in the interface. Finally, in the Main class, we create an object of the Circle class and use it as if it were an object of the Shape interface.\nYou can also have multiple classes implementing the same interface, and you can use them interchangeably as long as they are referenced as objects of the interface type."
  },
  {
    "objectID": "index.html#what-you-can-fin-on-this-quarto-web",
    "href": "index.html#what-you-can-fin-on-this-quarto-web",
    "title": "Author: David Marchan del Pino",
    "section": "What you can fin on this Quarto web?",
    "text": "What you can fin on this Quarto web?\n\n\nMy course notes fom the CIFO course\n\n\nThe resolution of the laboratories and the links of my repos with the code\n\n\nTo-do task that I consider or other task provided by the profesor (not implemented)\n\n\nSome tools that I use to perform my solutions and other functionalities that I am curious abaut (to-do)"
  },
  {
    "objectID": "labs/Lab-MD01-1.html",
    "href": "labs/Lab-MD01-1.html",
    "title": "Lab#MD01-1",
    "section": "",
    "text": "This is the Repo link\n\n\nPS C:\\Users\\AdministradorCIFO\\Desktop\\Projects\\Documentation> quarto publish gh-pages\n? Update site at https://daviddevops96.github.io/Documentation/? (Y/n) » Yes\nFrom https://github.com/daviddevops96/Documentation\n* branch            gh-pages   -> FETCH_HEAD\nRendering for publish:\n\n[1/9] 404.qmd\n[2/9] about.qmd\n[3/9] class_notes\\december.qmd\n[4/9] index.qmd\n[5/9] labs\\MarkUp\\Lab#MD01-1.qmd\n[6/9] sanbox_funcionalities\\sandbox.qmd\n[7/9] todo\\ideas.qmd\n[8/9] todo\\todo-class.qmd\n[9/9] tools\\tools.qmd\n\nbranch 'gh-pages' set up to track 'origin/gh-pages'.\nHEAD is now at 3c46989 Built site for gh-pages\nPreparing worktree (resetting branch 'gh-pages'; was at 3c46989)\nwarning: in the working copy of '404.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'about.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'class_notes/december.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'index.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'labs/MarkUp/Lab#MD01-1.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'robots.txt', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'sanbox_funcionalities/sandbox.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'search.json', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/bootstrap/bootstrap-dark.min.css', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/bootstrap/bootstrap-icons.css', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/bootstrap/bootstrap.min.css', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/bootstrap/bootstrap.min.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/clipboard/clipboard.min.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-html/anchor.min.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-html/popper.min.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-html/quarto-syntax-highlighting-dark.css', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-html/quarto-syntax-highlighting.css', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-html/quarto.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-html/tippy.umd.min.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-nav/headroom.min.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-nav/quarto-nav.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-search/autocomplete.umd.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-search/fuse.min.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-search/quarto-search.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'sitemap.xml', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'todo/ideas.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'todo/todo-class.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'tools/tools.html', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-diagram/mermaid-init.js', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-diagram/mermaid.css', LF will be replaced by CRLF the next time Git touches it\nwarning: in the working copy of 'site_libs/quarto-diagram/mermaid.min.js', LF will be replaced by CRLF the next time Git touches it\n[gh-pages 7409b31] Built site for gh-pages\n16 files changed, 341 insertions(+), 26 deletions(-)\ncreate mode 100644 labs/MarkUp/Lab#MD01-1.qmd\ncreate mode 100644 site_libs/quarto-diagram/mermaid-init.js\ncreate mode 100644 site_libs/quarto-diagram/mermaid.css\ncreate mode 100644 site_libs/quarto-diagram/mermaid.min.js\norigin  https://github.com/daviddevops96/Documentation.git (fetch)\norigin  https://github.com/daviddevops96/Documentation.git (push)\nTo https://github.com/daviddevops96/Documentation.git\n3c46989..7409b31  HEAD -> gh-pages\n\nNOTE: GitHub Pages sites use caching so you might need to click the refresh\nbutton within your web browser to see changes after deployment.\n\n[>] Deploying gh-pages branch to website (this may take a few minutes)\n[>] Published to https://daviddevops96.github.io/Documentation/"
  },
  {
    "objectID": "labs/labs.html",
    "href": "labs/labs.html",
    "title": "Labs",
    "section": "",
    "text": "Lab#MD01-1"
  },
  {
    "objectID": "sandbox/sandbox.html",
    "href": "sandbox/sandbox.html",
    "title": "Sandbox",
    "section": "",
    "text": "flowchart TB\n1{Login, Sing in, Exit} --> 2(Login)\n2 --> 3[Displays Menu : Username , Password]\n3 --> 4{Exist}\n4 --> 5[Menu : Add Game, Show Game, Show All Games, Exit]\n5 --> 6(Input NExit : Action + Calls Menu)\n6 --> 5\n5 --> 7(Input Exit: Bye!)\n7 --> 1\n3 --> 8{NExist}\n8 --> 9(Out Count = 3: Enter the user again 3 times left)\n9 --> 10{Exist}\n10 --> 5 \n9 --> 11{NExist}\n11 --> 12(Out Count = 0)\n8 --> 10(Out Count = 0)\n10 -->  J(Exit : break)\n\n\n\n\n\n\n\n\nA{Login, Sing in, Exit} –> B(Login) x A –> C(Sign in) A –> J(Exit : break) B –> D[Displays Menu : Username , Password] x D –> E{Exist} x E –> G[Menu : Add Game, Show Game, Show All Games, Exit] x G –> H(Input NExit : Action + Calls Menu) x H –> G x G –> I(Input Exit: Bye!) x I –> A x D –> F{NExist} x F –> K(Out Count = 3: Enter the user again 3 times left) x K –> F x F –> L(Out Count = 0) x L –> J xrevisar C –> M[Menu : Username, Password, Email, Games] M –> N(OK Username, Password…) N –> G M –> O(Misses fields Count = 3) M –> P(Misses fields Count = 0) O –> C P –> A"
  }
]